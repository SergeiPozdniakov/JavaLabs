plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.9'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'io.qameta.allure' version '2.12.0'
}

group = 'com.clouds'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}


dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    testImplementation 'org.testcontainers:junit-jupiter:1.19.8'
    testImplementation 'org.testcontainers:postgresql:1.19.8'

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'io.qameta.allure:allure-junit5:2.12.0' // Адаптер для JUnit 5
   // testImplementation 'io.qameta.allure:allure-spring:2.12.0' // Для интеграции с Spring
   // implementation 'io.qameta.allure:allure-spring-boot-starter:2.24.0'
    //implementation 'io.qameta.allure:allure-java-commons:2.24.0'

}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
    finalizedBy allureReport // Генерация отчета Allure после тестов
}



// ===== JaCoCo Конфигурация =====
jacoco {
    toolVersion = "0.8.11"
}

def jacocoExcluded = [
        "com/clouds/cloud_sprint/model/*",
        "com/clouds/cloud_sprint/config/*"
]

jacocoTestReport {
    dependsOn test

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: jacocoExcluded)
    }))

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn test

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: jacocoExcluded)
    }))

    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

allure {
    version = "2.12.0" // Версия Allure


    useJUnit5 {
        version = "2.12.0" // Версия адаптера для JUnit 5
    }
}



